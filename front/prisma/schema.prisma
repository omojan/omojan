generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hostMatchingId  String? @unique
  joinMatchingId  String? 
  gameId        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  hostMatching  Matching?  @relation("hostUser", fields: [hostMatchingId], references: [id])
  joinMatching  Matching? @relation("players", fields: [joinMatchingId], references: [id])
  game          Game?      @relation(fields: [gameId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  @@unique([identifier, token])
}

model Matching {
  id           String   @id @default(cuid())
  name         String
  password     String?
  isRecruiting Boolean  @default(true)
  // userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  hostUser     User?     @relation("hostUser")
  players      User[]   @relation("players")
  rule         Rule?
  game         Game?
}

model Game {
  id          String   @id @default(cuid())
  matchingId      String   @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now()) @updatedAt
  rule        Rule?
  matching    Matching   @relation(fields: [matchingId], references: [id], onDelete: Cascade)
  players     User[]
}


model Rule {
  id          String      @id @default(cuid())
  timeLimit   Int
  playerCount Int
  turnCount   Int
  matchingId  String      @unique
  gameId      String?          @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  matching    Matching   @relation(fields: [matchingId], references: [id], onDelete: Cascade)
  game        Game?       @relation(fields: [gameId], references: [id], onDelete: Cascade)
}
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Account {
//   id                 String   @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?   @db.Text
//   session_state      String?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   joinMatchingId  String?
//   gameId        String?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   accounts      Account[]
//   sessions      Session[]
//   hostMatching  Matching?  @relation("hostMatching")
//   joinMatching  Matching? @relation("players", fields: [joinMatchingId], references: [id])
//   game          Game?      @relation(fields: [gameId], references: [id])
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   @@unique([identifier, token])
// }

// model Matching {
//   id           String   @id @default(cuid())
//   name         String
//   password     String?
//   isRecruiting Boolean  @default(true)
//   userId       String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now()) @updatedAt
//   hostUser     User     @relation("hostMatching", fields: [userId], references: [id], onDelete: Cascade)
//   players      User[]   @relation("players")
//   rule         Rule?
//   game         Game?
// }

// model Game {
//   id          String   @id @default(cuid())
//   ruleId      String    @unique
//   gameId      String    @unique
//   createdAt              DateTime  @default(now())
//   updatedAt              DateTime  @default(now()) @updatedAt
//   rule        Rule       @relation(fields: [ruleId], references: [id])
//   matching    Matching   @relation(fields: [gameId], references: [id])
//   players     User[]
// }


// model Rule {
//   id          String      @id @default(cuid())
//   timeLimit   Int
//   playerCount Int
//   turnCount   Int
//   matchingId  String      @unique
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   matching    Matching   @relation(fields: [matchingId], references: [id])
//   game        Game?
// }