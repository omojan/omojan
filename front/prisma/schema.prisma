generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  player         Player?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  @@unique([identifier, token])
}

model Player{
  id              String      @id @default(cuid())
  words           String[]
  winCount        Int         @default(0)
  userId          String      @unique
  hostMatchingId  String?     @unique
  joinMatchingId  String? 
  gameId          String?     
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  createTexts     Text[]      @relation("authorPlayer")
  voteTexts       Text[]      @relation("votePlayers")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  hostMatching    Matching?   @relation("hostPlayer", fields: [hostMatchingId], references: [id])
  joinMatching    Matching?   @relation("players", fields: [joinMatchingId], references: [id],onDelete: Cascade)
  turn            Turn[]
  round           Round[]
  game            Game?       @relation(fields: [gameId], references: [id])
}

enum Scene {
  RECRUITING
  OPENING
  BATTLE
  VOTE
}

model Matching {
  id           String   @id @default(cuid())
  name         String
  password     String
  isRecruiting Boolean  @default(true)
  gameId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  hostPlayer   Player?  @relation("hostPlayer")
  players      Player[] @relation("players")
  game         Game?     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Rule {
  id           String      @id @default(cuid())
  timeLimit    Int
  playerCount  Int
  roundCount   Int
  frontAndBack Boolean
  gameId       String        @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  game         Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
}
model Game {
  id            String     @id @default(cuid())
  parentWords    String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  matching      Matching?
  rule          Rule?
  rounds        Round[]
  scene         Scene      @default(RECRUITING)
  players       Player[]
}
model Round {
  id            String    @id @default(cuid())
  gameId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  orderPlayers  Player[]
  turns         Turn[]
  game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Turn{
  id          String     @id @default(cuid())
  roundId     String
  playerId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  player      Player?     @relation(fields: [playerId], references: [id])
  text        Text?
  round       Round       @relation(fields: [roundId], references: [id], onDelete: Cascade)
}

model Text {
  id            String   @id @default(cuid())
  parentWord    String
  frontWord     String?
  backWord      String?
  turnId        String    @unique
  authorId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  votePlayers   Player[]   @relation("votePlayers")
  authorPlayer  Player    @relation("authorPlayer", fields: [authorId], references: [id])
  turn          Turn       @relation(fields: [turnId], references: [id], onDelete: Cascade)
}

model Word {
  id          String   @id @default(cuid())
  text        String
  demand      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Account {
//   id                 String   @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?   @db.Text
//   session_state      String?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   joinMatchingId  String?
//   gameId        String?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   accounts      Account[]
//   sessions      Session[]
//   hostMatching  Matching?  @relation("hostMatching")
//   joinMatching  Matching? @relation("players", fields: [joinMatchingId], references: [id])
//   game          Game?      @relation(fields: [gameId], references: [id])
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   @@unique([identifier, token])
// }

// model Matching {
//   id           String   @id @default(cuid())
//   name         String
//   password     String?
//   isRecruiting Boolean  @default(true)
//   userId       String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now()) @updatedAt
//   hostUser     User     @relation("hostMatching", fields: [userId], references: [id], onDelete: Cascade)
//   players      User[]   @relation("players")
//   rule         Rule?
//   game         Game?
// }

// model Game {
//   id          String   @id @default(cuid())
//   ruleId      String    @unique
//   gameId      String    @unique
//   createdAt              DateTime  @default(now())
//   updatedAt              DateTime  @default(now()) @updatedAt
//   rule        Rule       @relation(fields: [ruleId], references: [id])
//   matching    Matching   @relation(fields: [gameId], references: [id])
//   players     User[]
// }


// model Rule {
//   id          String      @id @default(cuid())
//   timeLimit   Int
//   playerCount Int
//   turnCount   Int
//   matchingId  String      @unique
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @default(now()) @updatedAt
//   matching    Matching   @relation(fields: [matchingId], references: [id])
//   game        Game?
// }